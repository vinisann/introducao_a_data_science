# -*- coding: utf-8 -*-
"""Introdução a Data Science.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S7WG_BhnJ4qNFu_uwixVwaiVRBvnawxq

#Descobrir versão do sns
"""

print (sns.__version__)

"""#Analisando as notas em geral

```
# Isto está formatado como código
```

O padrão para quando importa pandas é **"as pd"**
"""

import pandas as pd

notas = pd.read_csv("ratings.csv")
notas.head()

"""importa quantas linhas x colunas tem, no caso são 100836 linhas e 4 colunas"""

notas.shape

"""Separa as notas por coluna"""

notas.columns = ["usuarioId", "filmeId", "nota", "momento"]
notas.head()

"""mostra quais são as notas que os usuários deram"""

notas['nota'].unique()

"""conta quantas vezes a nota se repetiu"""

notas ['nota'].value_counts()

"""mostra a média e mediana de todas notas dadas"""

print ("Media:", notas ['nota'].mean())
print ("Mediana:", notas ['nota'].median())

notas.nota.head()

"""Na verdade, queremos saber quantas vezes cada informação aparece nesse conjunto de dados, o que pode ser visualizado em um histograma. Para gerá-lo, usaremos, no método plot(), o argumento kind com o valor hist:"""

notas.nota.plot(kind='hist')

notas.nota.describe()

import seaborn as sns

sns.boxplot(notas.nota)

"""#Olhando os filmes"""

filmes = pd.read_csv("movies.csv")
filmes.columns = ["filmeId", "titulo", "generos"]
filmes.head()

notas.head()

"""#Analisando algumas notas específicas por filme"""

notas.query("filmeId==1").nota.mean()

notas.query("filmeId==2").nota.mean()

medias_por_filme = notas.groupby("filmeId").mean() ["nota"]
medias_por_filme.head()

medias_por_filme.plot(kind='hist')

medias_por_filme.describe()

sns.distplot(medias_por_filme, bins=10)

import matplotlib.pyplot as plt
plt.hist(medias_por_filme)
plt.title("Histograma das médias dos filmes")

tmdb = pd.read_csv("tmdb_5000_movies.csv")
tmdb.head()

tmdb.original_language.unique() #categorica nominal

# primeiro grau (ensino fundamental)
# segundo grau (ensimo médio)
# terceiro grau (ensino superior)
# 1 grau < 2 grau < 3 grau # categoria ordinal

# burdget => orçamento => quantitativa contínuo

# quantidade de votos => 1, 2, 3, 4, não tem 2.5 votos. 
# notas do movielens => 0.5, 1, 1.5 ... , 5 não tem 2.7

tmdb.original_language.value_counts()

tmdb.vote_average.unique() #mostras as notas como únicas

tmdb["original_language"].value_counts().index

tmdb["original_language"].value_counts().values

contagem_de_lingua = tmdb["original_language"].value_counts().to_frame().reset_index()
contagem_de_lingua.columns = ["original_language" , "total"]
contagem_de_lingua.head()

sns.barplot(x="original_language", y = "total", data = contagem_de_lingua)

sns.catplot(x = "original_language", kind="count", data = tmdb) #Sem precisar ficar fazendo manual, já faz automático

"""Raramente vai utilizar o gráfico de pizza, não é muito utilizado."""

plt.pie(contagem_de_lingua["total"], labels = contagem_de_lingua["original_language"])

total_por_lingua = tmdb["original_language"].value_counts()
total_geral = total_por_lingua.sum()
total_de_ingles = total_por_lingua.loc["en"]
total_do_resto = total_geral - total_de_ingles
print(total_de_ingles, total_do_resto)

dados = {
    'lingua' : ['ingles', 'outros'],
    'total' : [total_de_ingles, total_do_resto]
}
dados = pd.DataFrame(dados)
sns.barplot(x="lingua", y="total", data = dados)

plt.pie(dados["total"], labels = dados["lingua"])

total_por_lingua_de_outros_filmes = tmdb.query("original_language != 'en' ").original_language.value_counts()
total_por_lingua_de_outros_filmes

filmes_sem_lingua_original_em_ingles = tmdb.query("original_language != 'en'")

filmes_sem_lingua_original_em_ingles = tmdb.query("original_language != 'en'")
sns.catplot(x = "original_language", kind="count", data = filmes_sem_lingua_original_em_ingles)

sns.catplot(x = "original_language", data = filmes_sem_lingua_original_em_ingles, 
            kind="count", 
            aspect=2,
            palette="GnBu_d",
            order = total_por_lingua_de_outros_filmes.index)

"""#Revisando o papel da média, mediana, medidas de tendência central, dispersão, desvio padrão, boxplot, histograma"""

filmes.head(2)

notas_do_toy_story = notas.query("filmeId==1")
notas_do_jumanji = notas.query("filmeId==2")
print(len(notas_do_toy_story), len(notas_do_jumanji))

print("Nota média do Toy Story %.2f" % notas_do_toy_story.nota.mean())
print("Nota média do Jumanji %.2f" % notas_do_jumanji.nota.mean())

print("Nota mediana do Toy Story %.2f" % notas_do_toy_story.nota.median())
print("Nota mediana do Jumanji %.2f" % notas_do_jumanji.nota.median())

import numpy as np

filme1 = np.append(np.array([2.5] * 10), np.array([3.5] * 10))
filme2 = np.append(np.array([5] * 10), np.array([1] * 10))

print(filme1.mean(), filme2.mean())
print(np.std(filme1), np.std(filme2))
print(np.median(filme1), np.median(filme2))

sns.distplot(filme1)
sns.distplot(filme2)

plt.hist(filme1)
plt.hist(filme2)

plt.boxplot([filme1,filme2])

plt.boxplot([notas_do_toy_story.nota, notas_do_jumanji.nota])

sns.boxplot(x = "filmeId", y = "nota" , data = notas.query("filmeId in [1,2]"))

sns.boxplot(x = "filmeId", y = "nota" , data = notas.query("filmeId in [1,2,3,4,5]"))

print(notas_do_jumanji.nota.std(),
notas_do_toy_story.nota.std())